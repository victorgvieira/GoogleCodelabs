package com.example.android.hilt.di

import android.content.Context
import androidx.room.Room
import com.example.android.hilt.data.AppDatabase
import com.example.android.hilt.data.LogDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Singleton

// DONE @InstallIn tell the scope of this HiltComponent (container)
//  since LoggerLocalDataSource is application scoped,
//  and this module will provide dependencies to it,
//  this module needs to be application scoped as well
@InstallIn(ApplicationComponent::class)
// DONE @Module tells that this class provide hilts dependencies
@Module
object DatabaseModule {

    //DONE @Provides tell how to provide types
    // the function body will be executed every time that an instance is needed
    // the return type tells the binding's type
    // the function parameters are dependencies of the type
    @Provides
    fun provideLogDao(database: AppDatabase): LogDao = database.logDao()

    //DONE the AppDatabase it's generated by Room
    // so it need's to be provided as well
    // annotate with @Singleton to provide the same database instance
    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase =
        Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "logging.db"
        ).build()


}